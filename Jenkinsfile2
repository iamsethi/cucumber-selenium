pipeline {
    agent any
    stages {
        stage('Pull Latest Image') {
            steps {
                sh 'docker pull iamsethi/cucumber-selenium-docker'
            }
        }
        stage('Run Test') {
            steps {
               script {
 					 def tags = '@regression'
               		 runTests(tags, PIPELINE_ID, 'NB', PROFILE, DIRECTORY, MAX_PODS)                    
               	 }
        }
        }
       
        }
        
    environment {
        MAX_PODS = 155
        DIRECTORY = "cucumber-selenium"
        PIPELINE_ID = "${env.BUILD_TAG}"
        PROFILE = "${env.BRANCH_NAME}"
    }
    
    post{
    always
    {
   	archiveArtifacts artifacts: 'chrome/**', fingerprint: true
   	archiveArtifacts artifacts: 'firefox/**', fingerprint: true
    }
    
    }
    
    
}



def runTests(tags, pipelineID, typeOfRun, profile, directory, maxPods) {

 	def suiteRunID = "${pipelineID}-${typeOfRun}"
    echo "SUITE_RUN_ID: ${suiteRunID}\nPROFILE: ${profile}\nPIPELINE_ID: ${pipelineID}"
    def scenarioCountCmd = "bundle install && bundle exec rake run_scenario_count[\"${tags}\",${profile}] SUITE_RUN_ID=${suiteRunID}"
    scenarioCount = sh(returnStdout: true, script: scenarioCountCmd)
    //sh(returnStdout: true, script: "cd ALLSUITES/queuing && export PIPELINE_ID=${pipelineID} && export SUITE_RUN_ID=${suiteRunID} && export PROFILE=${profile} && bundle exec ruby enqueue_tests.rb ${directory} ${tags}")
	echo("Scenario count is : $scenarioCount")
	def stepsForParallel = [:]
    def availablePods = Math.min(scenarioCount.toInteger(), maxPods.toInteger())
            availablePods.times { int i ->
                stepsForParallel["Run${typeOfRun}${i}"] = {
                    node {

                    }
                }
            }
            parallel stepsForParallel
        } 
    




