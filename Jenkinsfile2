pipeline {
    agent any
    stages {
        stage('Pull Latest Image') {
            steps {
                sh 'docker pull iamsethi/cucumber-selenium-docker'
            }
        }
        stage('Run Test') {
            steps {
               script {
 					def parallelTests = [:]  // creates empty map
 					def label = [] 
                  	packageJson = readJSON file: ('tests.json')
					parallelTests = packageJson.scripts
					parallelTests.each{ k, v -> label << k } 
						
				def stepsForParallel =label.collectEntries {
    			["echoing ${it}" : transformIntoStep(it)]
					}

			parallel stepsForParallel,failfast=true
                }
        }
        }
       
        }
    post{
    always
    {
   	archiveArtifacts artifacts: 'chrome/**', fingerprint: true
   	archiveArtifacts artifacts: 'firefox/**', fingerprint: true
    }
    
    }
    
    
}


// Take the string and echo it.
def transformIntoStep(inputString) {
    // We need to wrap what we return in a Groovy closure, or else it's invoked
    // when this method is called, not when we pass it to parallel.
    // To do this, you need to wrap the code below in { }, and either return
    // that explicitly, or use { -> } syntax.
    return {
        node {
            sh inputString
        }
    }
}



